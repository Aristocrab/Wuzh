//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Wuzh.g4 by ANTLR 4.13.1

#pragma warning disable

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class WuzhParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		Unit=10, Boolean=11, Integer=12, Double=13, String=14, Type=15, Plus=16, 
		Minus=17, Multiply=18, Divide=19, FloorDivide=20, Remainder=21, GreaterThan=22, 
		GreaterOrEqual=23, LessThan=24, LessOrEqual=25, Equals=26, NotEquals=27, 
		And=28, Or=29, ExclamationMark=30, LeftParenthesis=31, RightParenthesis=32, 
		LeftCurlyBracket=33, RightCurlyBracket=34, LeftSquareBracket=35, RightSquareBracket=36, 
		Comma=37, Semicolon=38, Colon=39, TwoDots=40, FunctionTypeSign=41, Declare=42, 
		Assign=43, Identificator=44, Whitespaces=45, Comments=46;
	public const int
		RULE_program = 0, RULE_importStatement = 1, RULE_statement = 2, RULE_semicolonTerminatedStatement = 3, 
		RULE_braceTerminatedStatement = 4, RULE_declaration = 5, RULE_assignment = 6, 
		RULE_indexAssignment = 7, RULE_expression = 8, RULE_multiplyExpression = 9, 
		RULE_value = 10, RULE_comparisonRightSide = 11, RULE_comparisonSign = 12, 
		RULE_basicTypeValue = 13, RULE_functionCall = 14, RULE_functionName = 15, 
		RULE_functionDeclaration = 16, RULE_functionParameters = 17, RULE_parameter = 18, 
		RULE_ifStatement = 19, RULE_elseStatement = 20, RULE_return = 21, RULE_whileStatement = 22, 
		RULE_forStatement = 23, RULE_forEachStatement = 24, RULE_forEachVariable = 25, 
		RULE_forEachCollection = 26, RULE_arrayIndexing = 27, RULE_arrayOrVariable = 28, 
		RULE_index = 29, RULE_array = 30, RULE_range = 31, RULE_dictionary = 32, 
		RULE_dictionaryEntry = 33;
	public static readonly string[] ruleNames = {
		"program", "importStatement", "statement", "semicolonTerminatedStatement", 
		"braceTerminatedStatement", "declaration", "assignment", "indexAssignment", 
		"expression", "multiplyExpression", "value", "comparisonRightSide", "comparisonSign", 
		"basicTypeValue", "functionCall", "functionName", "functionDeclaration", 
		"functionParameters", "parameter", "ifStatement", "elseStatement", "return", 
		"whileStatement", "forStatement", "forEachStatement", "forEachVariable", 
		"forEachCollection", "arrayIndexing", "arrayOrVariable", "index", "array", 
		"range", "dictionary", "dictionaryEntry"
	};

	private static readonly string[] _LiteralNames = {
		null, "'import'", "'const'", "'func'", "'if'", "'else'", "'return'", "'while'", 
		"'for'", "'in'", "'unit'", null, null, null, null, null, "'+'", "'-'", 
		"'*'", "'/'", "'//'", "'%'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!='", 
		"'&&'", "'||'", "'!'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", 
		"';'", "':'", "'..'", "'->'", "':='", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "Unit", "Boolean", 
		"Integer", "Double", "String", "Type", "Plus", "Minus", "Multiply", "Divide", 
		"FloorDivide", "Remainder", "GreaterThan", "GreaterOrEqual", "LessThan", 
		"LessOrEqual", "Equals", "NotEquals", "And", "Or", "ExclamationMark", 
		"LeftParenthesis", "RightParenthesis", "LeftCurlyBracket", "RightCurlyBracket", 
		"LeftSquareBracket", "RightSquareBracket", "Comma", "Semicolon", "Colon", 
		"TwoDots", "FunctionTypeSign", "Declare", "Assign", "Identificator", "Whitespaces", 
		"Comments"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Wuzh.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static WuzhParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public WuzhParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public WuzhParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 68;
				importStatement();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17592186077660L) != 0)) {
				{
				{
				State = 74;
				statement();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(WuzhParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(WuzhParser.Semicolon, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(T__0);
			State = 81;
			Match(String);
			State = 82;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SemicolonTerminatedStatementContext semicolonTerminatedStatement() {
			return GetRuleContext<SemicolonTerminatedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BraceTerminatedStatementContext braceTerminatedStatement() {
			return GetRuleContext<BraceTerminatedStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__5:
			case Type:
			case Identificator:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84;
				semicolonTerminatedStatement();
				}
				break;
			case T__2:
			case T__3:
			case T__6:
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85;
				braceTerminatedStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemicolonTerminatedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(WuzhParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexAssignmentContext indexAssignment() {
			return GetRuleContext<IndexAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		public SemicolonTerminatedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semicolonTerminatedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterSemicolonTerminatedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitSemicolonTerminatedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemicolonTerminatedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SemicolonTerminatedStatementContext semicolonTerminatedStatement() {
		SemicolonTerminatedStatementContext _localctx = new SemicolonTerminatedStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_semicolonTerminatedStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 88;
				declaration();
				}
				break;
			case 2:
				{
				State = 89;
				assignment();
				}
				break;
			case 3:
				{
				State = 90;
				indexAssignment();
				}
				break;
			case 4:
				{
				State = 91;
				functionCall();
				}
				break;
			case 5:
				{
				State = 92;
				@return();
				}
				break;
			}
			State = 95;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BraceTerminatedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForEachStatementContext forEachStatement() {
			return GetRuleContext<ForEachStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public BraceTerminatedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braceTerminatedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterBraceTerminatedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitBraceTerminatedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraceTerminatedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BraceTerminatedStatementContext braceTerminatedStatement() {
		BraceTerminatedStatementContext _localctx = new BraceTerminatedStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_braceTerminatedStatement);
		try {
			State = 102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				ifStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				whileStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 99;
				forStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 100;
				forEachStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 101;
				functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(WuzhParser.Identificator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Declare() { return GetToken(WuzhParser.Declare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(WuzhParser.Type, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 104;
				Match(T__1);
				}
			}

			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Type) {
				{
				State = 107;
				Match(Type);
				}
			}

			State = 110;
			Match(Identificator);
			State = 111;
			Match(Declare);
			State = 112;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(WuzhParser.Identificator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(WuzhParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(Identificator);
			State = 115;
			Match(Assign);
			State = 116;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(WuzhParser.Identificator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSquareBracket() { return GetToken(WuzhParser.LeftSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSquareBracket() { return GetToken(WuzhParser.RightSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(WuzhParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IndexAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterIndexAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitIndexAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexAssignmentContext indexAssignment() {
		IndexAssignmentContext _localctx = new IndexAssignmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_indexAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(Identificator);
			State = 119;
			Match(LeftSquareBracket);
			State = 120;
			index();
			State = 121;
			Match(RightSquareBracket);
			State = 122;
			Match(Assign);
			State = 123;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyExpressionContext[] multiplyExpression() {
			return GetRuleContexts<MultiplyExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyExpressionContext multiplyExpression(int i) {
			return GetRuleContext<MultiplyExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ExclamationMark() { return GetToken(WuzhParser.ExclamationMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(WuzhParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(WuzhParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(WuzhParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(WuzhParser.Minus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonRightSideContext comparisonRightSide() {
			return GetRuleContext<ComparisonRightSideContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ExclamationMark) {
				{
				State = 125;
				Match(ExclamationMark);
				}
			}

			State = 128;
			multiplyExpression();
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				State = 133;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Plus:
					{
					State = 129;
					Match(Plus);
					State = 130;
					multiplyExpression();
					}
					break;
				case Minus:
					{
					State = 131;
					Match(Minus);
					State = 132;
					multiplyExpression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 264241152L) != 0)) {
				{
				State = 138;
				comparisonRightSide();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Multiply() { return GetTokens(WuzhParser.Multiply); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply(int i) {
			return GetToken(WuzhParser.Multiply, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Divide() { return GetTokens(WuzhParser.Divide); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide(int i) {
			return GetToken(WuzhParser.Divide, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FloorDivide() { return GetTokens(WuzhParser.FloorDivide); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloorDivide(int i) {
			return GetToken(WuzhParser.FloorDivide, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Remainder() { return GetTokens(WuzhParser.Remainder); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Remainder(int i) {
			return GetToken(WuzhParser.Remainder, i);
		}
		public MultiplyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyExpressionContext multiplyExpression() {
		MultiplyExpressionContext _localctx = new MultiplyExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_multiplyExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			value();
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3932160L) != 0)) {
				{
				State = 150;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Multiply:
					{
					State = 142;
					Match(Multiply);
					State = 143;
					value();
					}
					break;
				case Divide:
					{
					State = 144;
					Match(Divide);
					State = 145;
					value();
					}
					break;
				case FloorDivide:
					{
					State = 146;
					Match(FloorDivide);
					State = 147;
					value();
					}
					break;
				case Remainder:
					{
					State = 148;
					Match(Remainder);
					State = 149;
					value();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(WuzhParser.Identificator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicTypeValueContext basicTypeValue() {
			return GetRuleContext<BasicTypeValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexingContext arrayIndexing() {
			return GetRuleContext<ArrayIndexingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParenthesis() { return GetToken(WuzhParser.LeftParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParenthesis() { return GetToken(WuzhParser.RightParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(WuzhParser.Minus, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 20, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Minus) {
				{
				State = 155;
				Match(Minus);
				}
			}

			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 158;
				Match(Identificator);
				}
				break;
			case 2:
				{
				State = 159;
				basicTypeValue();
				}
				break;
			case 3:
				{
				State = 160;
				functionCall();
				}
				break;
			case 4:
				{
				State = 161;
				arrayIndexing();
				}
				break;
			case 5:
				{
				State = 162;
				Match(LeftParenthesis);
				State = 163;
				expression();
				State = 164;
				Match(RightParenthesis);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonRightSideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonSignContext comparisonSign() {
			return GetRuleContext<ComparisonSignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ComparisonRightSideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonRightSide; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterComparisonRightSide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitComparisonRightSide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonRightSide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonRightSideContext comparisonRightSide() {
		ComparisonRightSideContext _localctx = new ComparisonRightSideContext(Context, State);
		EnterRule(_localctx, 22, RULE_comparisonRightSide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			comparisonSign();
			State = 169;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonSignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan() { return GetToken(WuzhParser.GreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterOrEqual() { return GetToken(WuzhParser.GreaterOrEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(WuzhParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessOrEqual() { return GetToken(WuzhParser.LessOrEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(WuzhParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(WuzhParser.NotEquals, 0); }
		public ComparisonSignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonSign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterComparisonSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitComparisonSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonSignContext comparisonSign() {
		ComparisonSignContext _localctx = new ComparisonSignContext(Context, State);
		EnterRule(_localctx, 24, RULE_comparisonSign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 264241152L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicTypeValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unit() { return GetToken(WuzhParser.Unit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(WuzhParser.Integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(WuzhParser.Double, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(WuzhParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Boolean() { return GetToken(WuzhParser.Boolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryContext dictionary() {
			return GetRuleContext<DictionaryContext>(0);
		}
		public BasicTypeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicTypeValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterBasicTypeValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitBasicTypeValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicTypeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicTypeValueContext basicTypeValue() {
		BasicTypeValueContext _localctx = new BasicTypeValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_basicTypeValue);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173;
				Match(Unit);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 174;
				Match(Integer);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 175;
				Match(Double);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 176;
				Match(String);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 177;
				Match(Boolean);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 178;
				array();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 179;
				range();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 180;
				dictionary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParenthesis() { return GetToken(WuzhParser.LeftParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParenthesis() { return GetToken(WuzhParser.RightParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(WuzhParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(WuzhParser.Comma, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 28, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			functionName();
			State = 184;
			Match(LeftParenthesis);
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17638357138432L) != 0)) {
				{
				State = 185;
				expression();
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 186;
					Match(Comma);
					State = 187;
					expression();
					}
					}
					State = 192;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 195;
			Match(RightParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(WuzhParser.Identificator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(WuzhParser.Type, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 30, RULE_functionName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			_la = TokenStream.LA(1);
			if ( !(_la==Type || _la==Identificator) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(WuzhParser.Identificator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParenthesis() { return GetToken(WuzhParser.LeftParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParenthesis() { return GetToken(WuzhParser.RightParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftCurlyBracket() { return GetToken(WuzhParser.LeftCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightCurlyBracket() { return GetToken(WuzhParser.RightCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FunctionTypeSign() { return GetToken(WuzhParser.FunctionTypeSign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(WuzhParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(T__2);
			State = 200;
			Match(Identificator);
			State = 201;
			Match(LeftParenthesis);
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Type || _la==Identificator) {
				{
				State = 202;
				functionParameters();
				}
			}

			State = 205;
			Match(RightParenthesis);
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FunctionTypeSign) {
				{
				State = 206;
				Match(FunctionTypeSign);
				State = 207;
				Match(Type);
				}
			}

			State = 210;
			Match(LeftCurlyBracket);
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17592186077660L) != 0)) {
				{
				{
				State = 211;
				statement();
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 217;
			Match(RightCurlyBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(WuzhParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(WuzhParser.Comma, i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParametersContext functionParameters() {
		FunctionParametersContext _localctx = new FunctionParametersContext(Context, State);
		EnterRule(_localctx, 34, RULE_functionParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			parameter();
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 220;
				Match(Comma);
				State = 221;
				parameter();
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(WuzhParser.Identificator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(WuzhParser.Type, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Type) {
				{
				State = 227;
				Match(Type);
				}
			}

			State = 230;
			Match(Identificator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParenthesis() { return GetToken(WuzhParser.LeftParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParenthesis() { return GetToken(WuzhParser.RightParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftCurlyBracket() { return GetToken(WuzhParser.LeftCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightCurlyBracket() { return GetToken(WuzhParser.RightCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(T__3);
			State = 233;
			Match(LeftParenthesis);
			State = 234;
			expression();
			State = 235;
			Match(RightParenthesis);
			State = 236;
			Match(LeftCurlyBracket);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17592186077660L) != 0)) {
				{
				{
				State = 237;
				statement();
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 243;
			Match(RightCurlyBracket);
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 244;
				elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftCurlyBracket() { return GetToken(WuzhParser.LeftCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightCurlyBracket() { return GetToken(WuzhParser.RightCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_elseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(T__4);
			State = 248;
			Match(LeftCurlyBracket);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17592186077660L) != 0)) {
				{
				{
				State = 249;
				statement();
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 255;
			Match(RightCurlyBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 42, RULE_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(T__5);
			State = 258;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParenthesis() { return GetToken(WuzhParser.LeftParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParenthesis() { return GetToken(WuzhParser.RightParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftCurlyBracket() { return GetToken(WuzhParser.LeftCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightCurlyBracket() { return GetToken(WuzhParser.RightCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			Match(T__6);
			State = 261;
			Match(LeftParenthesis);
			State = 262;
			expression();
			State = 263;
			Match(RightParenthesis);
			State = 264;
			Match(LeftCurlyBracket);
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17592186077660L) != 0)) {
				{
				{
				State = 265;
				statement();
				}
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 271;
			Match(RightCurlyBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParenthesis() { return GetToken(WuzhParser.LeftParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(WuzhParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(WuzhParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParenthesis() { return GetToken(WuzhParser.RightParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftCurlyBracket() { return GetToken(WuzhParser.LeftCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightCurlyBracket() { return GetToken(WuzhParser.RightCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(T__7);
			State = 274;
			Match(LeftParenthesis);
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17592186077188L) != 0)) {
				{
				State = 275;
				declaration();
				}
			}

			State = 278;
			Match(Comma);
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17638357138432L) != 0)) {
				{
				State = 279;
				expression();
				}
			}

			State = 282;
			Match(Comma);
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identificator) {
				{
				State = 283;
				assignment();
				}
			}

			State = 286;
			Match(RightParenthesis);
			State = 287;
			Match(LeftCurlyBracket);
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17592186077660L) != 0)) {
				{
				{
				State = 288;
				statement();
				}
				}
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 294;
			Match(RightCurlyBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParenthesis() { return GetToken(WuzhParser.LeftParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForEachVariableContext forEachVariable() {
			return GetRuleContext<ForEachVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForEachCollectionContext forEachCollection() {
			return GetRuleContext<ForEachCollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParenthesis() { return GetToken(WuzhParser.RightParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftCurlyBracket() { return GetToken(WuzhParser.LeftCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightCurlyBracket() { return GetToken(WuzhParser.RightCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForEachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterForEachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitForEachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStatementContext forEachStatement() {
		ForEachStatementContext _localctx = new ForEachStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_forEachStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(T__7);
			State = 297;
			Match(LeftParenthesis);
			State = 298;
			forEachVariable();
			State = 299;
			Match(T__8);
			State = 300;
			forEachCollection();
			State = 301;
			Match(RightParenthesis);
			State = 302;
			Match(LeftCurlyBracket);
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17592186077660L) != 0)) {
				{
				{
				State = 303;
				statement();
				}
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 309;
			Match(RightCurlyBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(WuzhParser.Identificator, 0); }
		public ForEachVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterForEachVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitForEachVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachVariableContext forEachVariable() {
		ForEachVariableContext _localctx = new ForEachVariableContext(Context, State);
		EnterRule(_localctx, 50, RULE_forEachVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			Match(Identificator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachCollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForEachCollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachCollection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterForEachCollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitForEachCollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachCollectionContext forEachCollection() {
		ForEachCollectionContext _localctx = new ForEachCollectionContext(Context, State);
		EnterRule(_localctx, 52, RULE_forEachCollection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayOrVariableContext arrayOrVariable() {
			return GetRuleContext<ArrayOrVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSquareBracket() { return GetToken(WuzhParser.LeftSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSquareBracket() { return GetToken(WuzhParser.RightSquareBracket, 0); }
		public ArrayIndexingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndexing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterArrayIndexing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitArrayIndexing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndexing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexingContext arrayIndexing() {
		ArrayIndexingContext _localctx = new ArrayIndexingContext(Context, State);
		EnterRule(_localctx, 54, RULE_arrayIndexing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			arrayOrVariable();
			State = 316;
			Match(LeftSquareBracket);
			State = 317;
			index();
			State = 318;
			Match(RightSquareBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayOrVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(WuzhParser.Identificator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ArrayOrVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayOrVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterArrayOrVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitArrayOrVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayOrVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayOrVariableContext arrayOrVariable() {
		ArrayOrVariableContext _localctx = new ArrayOrVariableContext(Context, State);
		EnterRule(_localctx, 56, RULE_arrayOrVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identificator:
				{
				State = 320;
				Match(Identificator);
				}
				break;
			case LeftSquareBracket:
				{
				State = 321;
				array();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(WuzhParser.Identificator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 58, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 324;
				Match(Identificator);
				}
				break;
			case 2:
				{
				State = 325;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSquareBracket() { return GetToken(WuzhParser.LeftSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSquareBracket() { return GetToken(WuzhParser.RightSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(WuzhParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(WuzhParser.Comma, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 60, RULE_array);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(LeftSquareBracket);
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17638357138432L) != 0)) {
				{
				State = 329;
				expression();
				State = 334;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 330;
						Match(Comma);
						State = 331;
						expression();
						}
						} 
					}
					State = 336;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
				}
				}
			}

			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 339;
				Match(Comma);
				}
			}

			State = 342;
			Match(RightSquareBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSquareBracket() { return GetToken(WuzhParser.LeftSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TwoDots() { return GetToken(WuzhParser.TwoDots, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSquareBracket() { return GetToken(WuzhParser.RightSquareBracket, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 62, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			Match(LeftSquareBracket);
			State = 345;
			expression();
			State = 346;
			Match(TwoDots);
			State = 347;
			expression();
			State = 348;
			Match(RightSquareBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftCurlyBracket() { return GetToken(WuzhParser.LeftCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightCurlyBracket() { return GetToken(WuzhParser.RightCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryEntryContext[] dictionaryEntry() {
			return GetRuleContexts<DictionaryEntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryEntryContext dictionaryEntry(int i) {
			return GetRuleContext<DictionaryEntryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(WuzhParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(WuzhParser.Comma, i);
		}
		public DictionaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterDictionary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitDictionary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryContext dictionary() {
		DictionaryContext _localctx = new DictionaryContext(Context, State);
		EnterRule(_localctx, 64, RULE_dictionary);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			Match(LeftCurlyBracket);
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==String) {
				{
				State = 351;
				dictionaryEntry();
				State = 356;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 352;
						Match(Comma);
						State = 353;
						dictionaryEntry();
						}
						} 
					}
					State = 358;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				}
				}
			}

			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 361;
				Match(Comma);
				}
			}

			State = 364;
			Match(RightCurlyBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryEntryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(WuzhParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(WuzhParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DictionaryEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryEntry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.EnterDictionaryEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWuzhListener typedListener = listener as IWuzhListener;
			if (typedListener != null) typedListener.ExitDictionaryEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWuzhVisitor<TResult> typedVisitor = visitor as IWuzhVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryEntryContext dictionaryEntry() {
		DictionaryEntryContext _localctx = new DictionaryEntryContext(Context, State);
		EnterRule(_localctx, 66, RULE_dictionaryEntry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			Match(String);
			State = 367;
			Match(Colon);
			State = 368;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,46,371,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,5,0,70,8,0,10,0,
		12,0,73,9,0,1,0,5,0,76,8,0,10,0,12,0,79,9,0,1,1,1,1,1,1,1,1,1,2,1,2,3,
		2,87,8,2,1,3,1,3,1,3,1,3,1,3,3,3,94,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,3,
		4,103,8,4,1,5,3,5,106,8,5,1,5,3,5,109,8,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
		1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,3,8,127,8,8,1,8,1,8,1,8,1,8,1,8,5,
		8,134,8,8,10,8,12,8,137,9,8,1,8,3,8,140,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,5,9,151,8,9,10,9,12,9,154,9,9,1,10,3,10,157,8,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,3,10,167,8,10,1,11,1,11,1,11,1,12,1,12,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,182,8,13,1,14,1,14,1,14,1,14,1,
		14,5,14,189,8,14,10,14,12,14,192,9,14,3,14,194,8,14,1,14,1,14,1,15,1,15,
		1,16,1,16,1,16,1,16,3,16,204,8,16,1,16,1,16,1,16,3,16,209,8,16,1,16,1,
		16,5,16,213,8,16,10,16,12,16,216,9,16,1,16,1,16,1,17,1,17,1,17,5,17,223,
		8,17,10,17,12,17,226,9,17,1,18,3,18,229,8,18,1,18,1,18,1,19,1,19,1,19,
		1,19,1,19,1,19,5,19,239,8,19,10,19,12,19,242,9,19,1,19,1,19,3,19,246,8,
		19,1,20,1,20,1,20,5,20,251,8,20,10,20,12,20,254,9,20,1,20,1,20,1,21,1,
		21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,5,22,267,8,22,10,22,12,22,270,9,
		22,1,22,1,22,1,23,1,23,1,23,3,23,277,8,23,1,23,1,23,3,23,281,8,23,1,23,
		1,23,3,23,285,8,23,1,23,1,23,1,23,5,23,290,8,23,10,23,12,23,293,9,23,1,
		23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,305,8,24,10,24,12,
		24,308,9,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,
		1,28,3,28,323,8,28,1,29,1,29,3,29,327,8,29,1,30,1,30,1,30,1,30,5,30,333,
		8,30,10,30,12,30,336,9,30,3,30,338,8,30,1,30,3,30,341,8,30,1,30,1,30,1,
		31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,5,32,355,8,32,10,32,12,
		32,358,9,32,3,32,360,8,32,1,32,3,32,363,8,32,1,32,1,32,1,33,1,33,1,33,
		1,33,1,33,0,0,34,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,58,60,62,64,66,0,2,1,0,22,27,2,0,15,15,44,44,
		393,0,71,1,0,0,0,2,80,1,0,0,0,4,86,1,0,0,0,6,93,1,0,0,0,8,102,1,0,0,0,
		10,105,1,0,0,0,12,114,1,0,0,0,14,118,1,0,0,0,16,126,1,0,0,0,18,141,1,0,
		0,0,20,156,1,0,0,0,22,168,1,0,0,0,24,171,1,0,0,0,26,181,1,0,0,0,28,183,
		1,0,0,0,30,197,1,0,0,0,32,199,1,0,0,0,34,219,1,0,0,0,36,228,1,0,0,0,38,
		232,1,0,0,0,40,247,1,0,0,0,42,257,1,0,0,0,44,260,1,0,0,0,46,273,1,0,0,
		0,48,296,1,0,0,0,50,311,1,0,0,0,52,313,1,0,0,0,54,315,1,0,0,0,56,322,1,
		0,0,0,58,326,1,0,0,0,60,328,1,0,0,0,62,344,1,0,0,0,64,350,1,0,0,0,66,366,
		1,0,0,0,68,70,3,2,1,0,69,68,1,0,0,0,70,73,1,0,0,0,71,69,1,0,0,0,71,72,
		1,0,0,0,72,77,1,0,0,0,73,71,1,0,0,0,74,76,3,4,2,0,75,74,1,0,0,0,76,79,
		1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,1,1,0,0,0,79,77,1,0,0,0,80,81,5,
		1,0,0,81,82,5,14,0,0,82,83,5,38,0,0,83,3,1,0,0,0,84,87,3,6,3,0,85,87,3,
		8,4,0,86,84,1,0,0,0,86,85,1,0,0,0,87,5,1,0,0,0,88,94,3,10,5,0,89,94,3,
		12,6,0,90,94,3,14,7,0,91,94,3,28,14,0,92,94,3,42,21,0,93,88,1,0,0,0,93,
		89,1,0,0,0,93,90,1,0,0,0,93,91,1,0,0,0,93,92,1,0,0,0,94,95,1,0,0,0,95,
		96,5,38,0,0,96,7,1,0,0,0,97,103,3,38,19,0,98,103,3,44,22,0,99,103,3,46,
		23,0,100,103,3,48,24,0,101,103,3,32,16,0,102,97,1,0,0,0,102,98,1,0,0,0,
		102,99,1,0,0,0,102,100,1,0,0,0,102,101,1,0,0,0,103,9,1,0,0,0,104,106,5,
		2,0,0,105,104,1,0,0,0,105,106,1,0,0,0,106,108,1,0,0,0,107,109,5,15,0,0,
		108,107,1,0,0,0,108,109,1,0,0,0,109,110,1,0,0,0,110,111,5,44,0,0,111,112,
		5,42,0,0,112,113,3,16,8,0,113,11,1,0,0,0,114,115,5,44,0,0,115,116,5,43,
		0,0,116,117,3,16,8,0,117,13,1,0,0,0,118,119,5,44,0,0,119,120,5,35,0,0,
		120,121,3,58,29,0,121,122,5,36,0,0,122,123,5,43,0,0,123,124,3,16,8,0,124,
		15,1,0,0,0,125,127,5,30,0,0,126,125,1,0,0,0,126,127,1,0,0,0,127,128,1,
		0,0,0,128,135,3,18,9,0,129,130,5,16,0,0,130,134,3,18,9,0,131,132,5,17,
		0,0,132,134,3,18,9,0,133,129,1,0,0,0,133,131,1,0,0,0,134,137,1,0,0,0,135,
		133,1,0,0,0,135,136,1,0,0,0,136,139,1,0,0,0,137,135,1,0,0,0,138,140,3,
		22,11,0,139,138,1,0,0,0,139,140,1,0,0,0,140,17,1,0,0,0,141,152,3,20,10,
		0,142,143,5,18,0,0,143,151,3,20,10,0,144,145,5,19,0,0,145,151,3,20,10,
		0,146,147,5,20,0,0,147,151,3,20,10,0,148,149,5,21,0,0,149,151,3,20,10,
		0,150,142,1,0,0,0,150,144,1,0,0,0,150,146,1,0,0,0,150,148,1,0,0,0,151,
		154,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,19,1,0,0,0,154,152,1,0,
		0,0,155,157,5,17,0,0,156,155,1,0,0,0,156,157,1,0,0,0,157,166,1,0,0,0,158,
		167,5,44,0,0,159,167,3,26,13,0,160,167,3,28,14,0,161,167,3,54,27,0,162,
		163,5,31,0,0,163,164,3,16,8,0,164,165,5,32,0,0,165,167,1,0,0,0,166,158,
		1,0,0,0,166,159,1,0,0,0,166,160,1,0,0,0,166,161,1,0,0,0,166,162,1,0,0,
		0,167,21,1,0,0,0,168,169,3,24,12,0,169,170,3,16,8,0,170,23,1,0,0,0,171,
		172,7,0,0,0,172,25,1,0,0,0,173,182,5,10,0,0,174,182,5,12,0,0,175,182,5,
		13,0,0,176,182,5,14,0,0,177,182,5,11,0,0,178,182,3,60,30,0,179,182,3,62,
		31,0,180,182,3,64,32,0,181,173,1,0,0,0,181,174,1,0,0,0,181,175,1,0,0,0,
		181,176,1,0,0,0,181,177,1,0,0,0,181,178,1,0,0,0,181,179,1,0,0,0,181,180,
		1,0,0,0,182,27,1,0,0,0,183,184,3,30,15,0,184,193,5,31,0,0,185,190,3,16,
		8,0,186,187,5,37,0,0,187,189,3,16,8,0,188,186,1,0,0,0,189,192,1,0,0,0,
		190,188,1,0,0,0,190,191,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,193,185,
		1,0,0,0,193,194,1,0,0,0,194,195,1,0,0,0,195,196,5,32,0,0,196,29,1,0,0,
		0,197,198,7,1,0,0,198,31,1,0,0,0,199,200,5,3,0,0,200,201,5,44,0,0,201,
		203,5,31,0,0,202,204,3,34,17,0,203,202,1,0,0,0,203,204,1,0,0,0,204,205,
		1,0,0,0,205,208,5,32,0,0,206,207,5,41,0,0,207,209,5,15,0,0,208,206,1,0,
		0,0,208,209,1,0,0,0,209,210,1,0,0,0,210,214,5,33,0,0,211,213,3,4,2,0,212,
		211,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,217,1,
		0,0,0,216,214,1,0,0,0,217,218,5,34,0,0,218,33,1,0,0,0,219,224,3,36,18,
		0,220,221,5,37,0,0,221,223,3,36,18,0,222,220,1,0,0,0,223,226,1,0,0,0,224,
		222,1,0,0,0,224,225,1,0,0,0,225,35,1,0,0,0,226,224,1,0,0,0,227,229,5,15,
		0,0,228,227,1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,231,5,44,0,0,231,
		37,1,0,0,0,232,233,5,4,0,0,233,234,5,31,0,0,234,235,3,16,8,0,235,236,5,
		32,0,0,236,240,5,33,0,0,237,239,3,4,2,0,238,237,1,0,0,0,239,242,1,0,0,
		0,240,238,1,0,0,0,240,241,1,0,0,0,241,243,1,0,0,0,242,240,1,0,0,0,243,
		245,5,34,0,0,244,246,3,40,20,0,245,244,1,0,0,0,245,246,1,0,0,0,246,39,
		1,0,0,0,247,248,5,5,0,0,248,252,5,33,0,0,249,251,3,4,2,0,250,249,1,0,0,
		0,251,254,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,255,1,0,0,0,254,
		252,1,0,0,0,255,256,5,34,0,0,256,41,1,0,0,0,257,258,5,6,0,0,258,259,3,
		16,8,0,259,43,1,0,0,0,260,261,5,7,0,0,261,262,5,31,0,0,262,263,3,16,8,
		0,263,264,5,32,0,0,264,268,5,33,0,0,265,267,3,4,2,0,266,265,1,0,0,0,267,
		270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,271,1,0,0,0,270,268,1,
		0,0,0,271,272,5,34,0,0,272,45,1,0,0,0,273,274,5,8,0,0,274,276,5,31,0,0,
		275,277,3,10,5,0,276,275,1,0,0,0,276,277,1,0,0,0,277,278,1,0,0,0,278,280,
		5,37,0,0,279,281,3,16,8,0,280,279,1,0,0,0,280,281,1,0,0,0,281,282,1,0,
		0,0,282,284,5,37,0,0,283,285,3,12,6,0,284,283,1,0,0,0,284,285,1,0,0,0,
		285,286,1,0,0,0,286,287,5,32,0,0,287,291,5,33,0,0,288,290,3,4,2,0,289,
		288,1,0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,294,1,
		0,0,0,293,291,1,0,0,0,294,295,5,34,0,0,295,47,1,0,0,0,296,297,5,8,0,0,
		297,298,5,31,0,0,298,299,3,50,25,0,299,300,5,9,0,0,300,301,3,52,26,0,301,
		302,5,32,0,0,302,306,5,33,0,0,303,305,3,4,2,0,304,303,1,0,0,0,305,308,
		1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,309,1,0,0,0,308,306,1,0,0,
		0,309,310,5,34,0,0,310,49,1,0,0,0,311,312,5,44,0,0,312,51,1,0,0,0,313,
		314,3,16,8,0,314,53,1,0,0,0,315,316,3,56,28,0,316,317,5,35,0,0,317,318,
		3,58,29,0,318,319,5,36,0,0,319,55,1,0,0,0,320,323,5,44,0,0,321,323,3,60,
		30,0,322,320,1,0,0,0,322,321,1,0,0,0,323,57,1,0,0,0,324,327,5,44,0,0,325,
		327,3,16,8,0,326,324,1,0,0,0,326,325,1,0,0,0,327,59,1,0,0,0,328,337,5,
		35,0,0,329,334,3,16,8,0,330,331,5,37,0,0,331,333,3,16,8,0,332,330,1,0,
		0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,338,1,0,0,0,336,
		334,1,0,0,0,337,329,1,0,0,0,337,338,1,0,0,0,338,340,1,0,0,0,339,341,5,
		37,0,0,340,339,1,0,0,0,340,341,1,0,0,0,341,342,1,0,0,0,342,343,5,36,0,
		0,343,61,1,0,0,0,344,345,5,35,0,0,345,346,3,16,8,0,346,347,5,40,0,0,347,
		348,3,16,8,0,348,349,5,36,0,0,349,63,1,0,0,0,350,359,5,33,0,0,351,356,
		3,66,33,0,352,353,5,37,0,0,353,355,3,66,33,0,354,352,1,0,0,0,355,358,1,
		0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,
		359,351,1,0,0,0,359,360,1,0,0,0,360,362,1,0,0,0,361,363,5,37,0,0,362,361,
		1,0,0,0,362,363,1,0,0,0,363,364,1,0,0,0,364,365,5,34,0,0,365,65,1,0,0,
		0,366,367,5,14,0,0,367,368,5,39,0,0,368,369,3,16,8,0,369,67,1,0,0,0,40,
		71,77,86,93,102,105,108,126,133,135,139,150,152,156,166,181,190,193,203,
		208,214,224,228,240,245,252,268,276,280,284,291,306,322,326,334,337,340,
		356,359,362
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
