//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Moist.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="MoistParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IMoistVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] MoistParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] MoistParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.semicolonTerminatedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSemicolonTerminatedStatement([NotNull] MoistParser.SemicolonTerminatedStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.braceTerminatedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBraceTerminatedStatement([NotNull] MoistParser.BraceTerminatedStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclaration([NotNull] MoistParser.DeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignment([NotNull] MoistParser.AssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.indexAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIndexAssignment([NotNull] MoistParser.IndexAssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] MoistParser.ExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.multiplyExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplyExpression([NotNull] MoistParser.MultiplyExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitValue([NotNull] MoistParser.ValueContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.comparisonRightSide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComparisonRightSide([NotNull] MoistParser.ComparisonRightSideContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.comparisonSign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComparisonSign([NotNull] MoistParser.ComparisonSignContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.basicTypeValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBasicTypeValue([NotNull] MoistParser.BasicTypeValueContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCall([NotNull] MoistParser.FunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionDeclaration([NotNull] MoistParser.FunctionDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.functionParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionParameters([NotNull] MoistParser.FunctionParametersContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] MoistParser.IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.elseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElseStatement([NotNull] MoistParser.ElseStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.@return"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturn([NotNull] MoistParser.ReturnContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileStatement([NotNull] MoistParser.WhileStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForStatement([NotNull] MoistParser.ForStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.forEachStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForEachStatement([NotNull] MoistParser.ForEachStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.forEachVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForEachVariable([NotNull] MoistParser.ForEachVariableContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.forEachCollection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForEachCollection([NotNull] MoistParser.ForEachCollectionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.arrayIndexing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayIndexing([NotNull] MoistParser.ArrayIndexingContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.arrayOrVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayOrVariable([NotNull] MoistParser.ArrayOrVariableContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.index"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIndex([NotNull] MoistParser.IndexContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MoistParser.array"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArray([NotNull] MoistParser.ArrayContext context);
}
