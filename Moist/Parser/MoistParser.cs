//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Moist.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MoistParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, Unit=19, Boolean=20, Integer=21, Double=22, String=23, Plus=24, 
		Minus=25, Multiply=26, Divide=27, FloorDivide=28, Remainder=29, GreaterThan=30, 
		GreaterOrEqual=31, LessThan=32, LessOrEqual=33, Equals=34, NotEquals=35, 
		And=36, Or=37, ExclamationMark=38, Identificator=39, Whitespaces=40, Comments=41;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_semicolonTerminatedStatement = 2, 
		RULE_braceTerminatedStatement = 3, RULE_declaration = 4, RULE_assignment = 5, 
		RULE_indexAssignment = 6, RULE_expression = 7, RULE_multiplyExpression = 8, 
		RULE_value = 9, RULE_comparisonRightSide = 10, RULE_comparisonSign = 11, 
		RULE_basicTypeValue = 12, RULE_functionCall = 13, RULE_functionDeclaration = 14, 
		RULE_functionParameters = 15, RULE_ifStatement = 16, RULE_elseStatement = 17, 
		RULE_return = 18, RULE_whileStatement = 19, RULE_forStatement = 20, RULE_forEachStatement = 21, 
		RULE_forEachVariable = 22, RULE_forEachCollection = 23, RULE_arrayIndexing = 24, 
		RULE_arrayOrVariable = 25, RULE_index = 26, RULE_array = 27;
	public static readonly string[] ruleNames = {
		"program", "statement", "semicolonTerminatedStatement", "braceTerminatedStatement", 
		"declaration", "assignment", "indexAssignment", "expression", "multiplyExpression", 
		"value", "comparisonRightSide", "comparisonSign", "basicTypeValue", "functionCall", 
		"functionDeclaration", "functionParameters", "ifStatement", "elseStatement", 
		"return", "whileStatement", "forStatement", "forEachStatement", "forEachVariable", 
		"forEachCollection", "arrayIndexing", "arrayOrVariable", "index", "array"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'const'", "':='", "'='", "'['", "']'", "'('", "')'", "','", 
		"'func'", "'{'", "'}'", "'if'", "'else'", "'return'", "'while'", "'for'", 
		"'in'", "'unit'", null, null, null, null, "'+'", "'-'", "'*'", "'/'", 
		"'//'", "'%'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!='", "'&&'", "'||'", 
		"'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "Unit", "Boolean", "Integer", 
		"Double", "String", "Plus", "Minus", "Multiply", "Divide", "FloorDivide", 
		"Remainder", "GreaterThan", "GreaterOrEqual", "LessThan", "LessOrEqual", 
		"Equals", "NotEquals", "And", "Or", "ExclamationMark", "Identificator", 
		"Whitespaces", "Comments"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Moist.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MoistParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MoistParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MoistParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 549756052484L) != 0)) {
				{
				{
				State = 56;
				statement();
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SemicolonTerminatedStatementContext semicolonTerminatedStatement() {
			return GetRuleContext<SemicolonTerminatedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BraceTerminatedStatementContext braceTerminatedStatement() {
			return GetRuleContext<BraceTerminatedStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__14:
			case Identificator:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62;
				semicolonTerminatedStatement();
				}
				break;
			case T__9:
			case T__12:
			case T__15:
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63;
				braceTerminatedStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemicolonTerminatedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexAssignmentContext indexAssignment() {
			return GetRuleContext<IndexAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		public SemicolonTerminatedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semicolonTerminatedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterSemicolonTerminatedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitSemicolonTerminatedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemicolonTerminatedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SemicolonTerminatedStatementContext semicolonTerminatedStatement() {
		SemicolonTerminatedStatementContext _localctx = new SemicolonTerminatedStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_semicolonTerminatedStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 66;
				declaration();
				}
				break;
			case 2:
				{
				State = 67;
				assignment();
				}
				break;
			case 3:
				{
				State = 68;
				indexAssignment();
				}
				break;
			case 4:
				{
				State = 69;
				functionCall();
				}
				break;
			case 5:
				{
				State = 70;
				@return();
				}
				break;
			}
			State = 73;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BraceTerminatedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForEachStatementContext forEachStatement() {
			return GetRuleContext<ForEachStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public BraceTerminatedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braceTerminatedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterBraceTerminatedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitBraceTerminatedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraceTerminatedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BraceTerminatedStatementContext braceTerminatedStatement() {
		BraceTerminatedStatementContext _localctx = new BraceTerminatedStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_braceTerminatedStatement);
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 75;
				ifStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 76;
				whileStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 77;
				forStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 78;
				forEachStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 79;
				functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(MoistParser.Identificator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 82;
				Match(T__1);
				}
			}

			State = 85;
			Match(Identificator);
			State = 86;
			Match(T__2);
			State = 87;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(MoistParser.Identificator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(Identificator);
			State = 90;
			Match(T__3);
			State = 91;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(MoistParser.Identificator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IndexAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterIndexAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitIndexAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexAssignmentContext indexAssignment() {
		IndexAssignmentContext _localctx = new IndexAssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_indexAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(Identificator);
			State = 94;
			Match(T__4);
			State = 95;
			index();
			State = 96;
			Match(T__5);
			State = 97;
			Match(T__3);
			State = 98;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyExpressionContext[] multiplyExpression() {
			return GetRuleContexts<MultiplyExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyExpressionContext multiplyExpression(int i) {
			return GetRuleContext<MultiplyExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ExclamationMark() { return GetToken(MoistParser.ExclamationMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(MoistParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(MoistParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(MoistParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(MoistParser.Minus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonRightSideContext comparisonRightSide() {
			return GetRuleContext<ComparisonRightSideContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ExclamationMark) {
				{
				State = 100;
				Match(ExclamationMark);
				}
			}

			State = 103;
			multiplyExpression();
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				State = 108;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Plus:
					{
					State = 104;
					Match(Plus);
					State = 105;
					multiplyExpression();
					}
					break;
				case Minus:
					{
					State = 106;
					Match(Minus);
					State = 107;
					multiplyExpression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 67645734912L) != 0)) {
				{
				State = 113;
				comparisonRightSide();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Multiply() { return GetTokens(MoistParser.Multiply); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply(int i) {
			return GetToken(MoistParser.Multiply, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Divide() { return GetTokens(MoistParser.Divide); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide(int i) {
			return GetToken(MoistParser.Divide, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FloorDivide() { return GetTokens(MoistParser.FloorDivide); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloorDivide(int i) {
			return GetToken(MoistParser.FloorDivide, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Remainder() { return GetTokens(MoistParser.Remainder); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Remainder(int i) {
			return GetToken(MoistParser.Remainder, i);
		}
		public MultiplyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyExpressionContext multiplyExpression() {
		MultiplyExpressionContext _localctx = new MultiplyExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_multiplyExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			value();
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1006632960L) != 0)) {
				{
				State = 125;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Multiply:
					{
					State = 117;
					Match(Multiply);
					State = 118;
					value();
					}
					break;
				case Divide:
					{
					State = 119;
					Match(Divide);
					State = 120;
					value();
					}
					break;
				case FloorDivide:
					{
					State = 121;
					Match(FloorDivide);
					State = 122;
					value();
					}
					break;
				case Remainder:
					{
					State = 123;
					Match(Remainder);
					State = 124;
					value();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(MoistParser.Identificator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicTypeValueContext basicTypeValue() {
			return GetRuleContext<BasicTypeValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexingContext arrayIndexing() {
			return GetRuleContext<ArrayIndexingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_value);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130;
				Match(Identificator);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131;
				basicTypeValue();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 132;
				functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 133;
				arrayIndexing();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 134;
				Match(T__6);
				State = 135;
				expression();
				State = 136;
				Match(T__7);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonRightSideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonSignContext comparisonSign() {
			return GetRuleContext<ComparisonSignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ComparisonRightSideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonRightSide; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterComparisonRightSide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitComparisonRightSide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonRightSide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonRightSideContext comparisonRightSide() {
		ComparisonRightSideContext _localctx = new ComparisonRightSideContext(Context, State);
		EnterRule(_localctx, 20, RULE_comparisonRightSide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			comparisonSign();
			State = 141;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonSignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan() { return GetToken(MoistParser.GreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterOrEqual() { return GetToken(MoistParser.GreaterOrEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(MoistParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessOrEqual() { return GetToken(MoistParser.LessOrEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(MoistParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(MoistParser.NotEquals, 0); }
		public ComparisonSignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonSign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterComparisonSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitComparisonSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonSignContext comparisonSign() {
		ComparisonSignContext _localctx = new ComparisonSignContext(Context, State);
		EnterRule(_localctx, 22, RULE_comparisonSign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 67645734912L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicTypeValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unit() { return GetToken(MoistParser.Unit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(MoistParser.Integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(MoistParser.Double, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(MoistParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Boolean() { return GetToken(MoistParser.Boolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public BasicTypeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicTypeValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterBasicTypeValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitBasicTypeValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicTypeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicTypeValueContext basicTypeValue() {
		BasicTypeValueContext _localctx = new BasicTypeValueContext(Context, State);
		EnterRule(_localctx, 24, RULE_basicTypeValue);
		try {
			State = 151;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Unit:
				EnterOuterAlt(_localctx, 1);
				{
				State = 145;
				Match(Unit);
				}
				break;
			case Integer:
				EnterOuterAlt(_localctx, 2);
				{
				State = 146;
				Match(Integer);
				}
				break;
			case Double:
				EnterOuterAlt(_localctx, 3);
				{
				State = 147;
				Match(Double);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 4);
				{
				State = 148;
				Match(String);
				}
				break;
			case Boolean:
				EnterOuterAlt(_localctx, 5);
				{
				State = 149;
				Match(Boolean);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 6);
				{
				State = 150;
				array();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(MoistParser.Identificator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 26, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(Identificator);
			State = 154;
			Match(T__6);
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 824649973920L) != 0)) {
				{
				State = 155;
				expression();
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__8) {
					{
					{
					State = 156;
					Match(T__8);
					State = 157;
					expression();
					}
					}
					State = 162;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 165;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(MoistParser.Identificator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(T__9);
			State = 168;
			Match(Identificator);
			State = 169;
			Match(T__6);
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identificator) {
				{
				State = 170;
				functionParameters();
				}
			}

			State = 173;
			Match(T__7);
			State = 174;
			Match(T__10);
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 549756052484L) != 0)) {
				{
				{
				State = 175;
				statement();
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 181;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identificator() { return GetTokens(MoistParser.Identificator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator(int i) {
			return GetToken(MoistParser.Identificator, i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParametersContext functionParameters() {
		FunctionParametersContext _localctx = new FunctionParametersContext(Context, State);
		EnterRule(_localctx, 30, RULE_functionParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(Identificator);
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 184;
				Match(T__8);
				State = 185;
				Match(Identificator);
				}
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(T__12);
			State = 192;
			Match(T__6);
			State = 193;
			expression();
			State = 194;
			Match(T__7);
			State = 195;
			Match(T__10);
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 549756052484L) != 0)) {
				{
				{
				State = 196;
				statement();
				}
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 202;
			Match(T__11);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 203;
				elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_elseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(T__13);
			State = 207;
			Match(T__10);
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 549756052484L) != 0)) {
				{
				{
				State = 208;
				statement();
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 214;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 36, RULE_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(T__14);
			State = 217;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(T__15);
			State = 220;
			Match(T__6);
			State = 221;
			expression();
			State = 222;
			Match(T__7);
			State = 223;
			Match(T__10);
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 549756052484L) != 0)) {
				{
				{
				State = 224;
				statement();
				}
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 230;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(T__16);
			State = 233;
			Match(T__6);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1 || _la==Identificator) {
				{
				State = 234;
				declaration();
				}
			}

			State = 237;
			Match(T__8);
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 824649973920L) != 0)) {
				{
				State = 238;
				expression();
				}
			}

			State = 241;
			Match(T__8);
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identificator) {
				{
				State = 242;
				assignment();
				}
			}

			State = 245;
			Match(T__7);
			State = 246;
			Match(T__10);
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 549756052484L) != 0)) {
				{
				{
				State = 247;
				statement();
				}
				}
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 253;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForEachVariableContext forEachVariable() {
			return GetRuleContext<ForEachVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForEachCollectionContext forEachCollection() {
			return GetRuleContext<ForEachCollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForEachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterForEachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitForEachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStatementContext forEachStatement() {
		ForEachStatementContext _localctx = new ForEachStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_forEachStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			Match(T__16);
			State = 256;
			Match(T__6);
			State = 257;
			forEachVariable();
			State = 258;
			Match(T__17);
			State = 259;
			forEachCollection();
			State = 260;
			Match(T__7);
			State = 261;
			Match(T__10);
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 549756052484L) != 0)) {
				{
				{
				State = 262;
				statement();
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 268;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(MoistParser.Identificator, 0); }
		public ForEachVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterForEachVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitForEachVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachVariableContext forEachVariable() {
		ForEachVariableContext _localctx = new ForEachVariableContext(Context, State);
		EnterRule(_localctx, 44, RULE_forEachVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			Match(Identificator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachCollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForEachCollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachCollection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterForEachCollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitForEachCollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachCollectionContext forEachCollection() {
		ForEachCollectionContext _localctx = new ForEachCollectionContext(Context, State);
		EnterRule(_localctx, 46, RULE_forEachCollection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayOrVariableContext arrayOrVariable() {
			return GetRuleContext<ArrayOrVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		public ArrayIndexingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndexing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterArrayIndexing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitArrayIndexing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndexing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexingContext arrayIndexing() {
		ArrayIndexingContext _localctx = new ArrayIndexingContext(Context, State);
		EnterRule(_localctx, 48, RULE_arrayIndexing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			arrayOrVariable();
			State = 275;
			Match(T__4);
			State = 276;
			index();
			State = 277;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayOrVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(MoistParser.Identificator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ArrayOrVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayOrVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterArrayOrVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitArrayOrVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayOrVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayOrVariableContext arrayOrVariable() {
		ArrayOrVariableContext _localctx = new ArrayOrVariableContext(Context, State);
		EnterRule(_localctx, 50, RULE_arrayOrVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identificator:
				{
				State = 279;
				Match(Identificator);
				}
				break;
			case T__4:
				{
				State = 280;
				array();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identificator() { return GetToken(MoistParser.Identificator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 52, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 283;
				Match(Identificator);
				}
				break;
			case 2:
				{
				State = 284;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMoistListener typedListener = listener as IMoistListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMoistVisitor<TResult> typedVisitor = visitor as IMoistVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 54, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(T__4);
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 824649973920L) != 0)) {
				{
				State = 288;
				expression();
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__8) {
					{
					{
					State = 289;
					Match(T__8);
					State = 290;
					expression();
					}
					}
					State = 295;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 298;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,41,301,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,5,0,58,
		8,0,10,0,12,0,61,9,0,1,1,1,1,3,1,65,8,1,1,2,1,2,1,2,1,2,1,2,3,2,72,8,2,
		1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,81,8,3,1,4,3,4,84,8,4,1,4,1,4,1,4,1,4,
		1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,3,7,102,8,7,1,7,1,7,1,
		7,1,7,1,7,5,7,109,8,7,10,7,12,7,112,9,7,1,7,3,7,115,8,7,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,5,8,126,8,8,10,8,12,8,129,9,8,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,3,9,139,8,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,
		1,12,1,12,3,12,152,8,12,1,13,1,13,1,13,1,13,1,13,5,13,159,8,13,10,13,12,
		13,162,9,13,3,13,164,8,13,1,13,1,13,1,14,1,14,1,14,1,14,3,14,172,8,14,
		1,14,1,14,1,14,5,14,177,8,14,10,14,12,14,180,9,14,1,14,1,14,1,15,1,15,
		1,15,5,15,187,8,15,10,15,12,15,190,9,15,1,16,1,16,1,16,1,16,1,16,1,16,
		5,16,198,8,16,10,16,12,16,201,9,16,1,16,1,16,3,16,205,8,16,1,17,1,17,1,
		17,5,17,210,8,17,10,17,12,17,213,9,17,1,17,1,17,1,18,1,18,1,18,1,19,1,
		19,1,19,1,19,1,19,1,19,5,19,226,8,19,10,19,12,19,229,9,19,1,19,1,19,1,
		20,1,20,1,20,3,20,236,8,20,1,20,1,20,3,20,240,8,20,1,20,1,20,3,20,244,
		8,20,1,20,1,20,1,20,5,20,249,8,20,10,20,12,20,252,9,20,1,20,1,20,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,264,8,21,10,21,12,21,267,9,21,
		1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,3,25,
		282,8,25,1,26,1,26,3,26,286,8,26,1,27,1,27,1,27,1,27,5,27,292,8,27,10,
		27,12,27,295,9,27,3,27,297,8,27,1,27,1,27,1,27,0,0,28,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,0,1,1,0,
		30,35,318,0,59,1,0,0,0,2,64,1,0,0,0,4,71,1,0,0,0,6,80,1,0,0,0,8,83,1,0,
		0,0,10,89,1,0,0,0,12,93,1,0,0,0,14,101,1,0,0,0,16,116,1,0,0,0,18,138,1,
		0,0,0,20,140,1,0,0,0,22,143,1,0,0,0,24,151,1,0,0,0,26,153,1,0,0,0,28,167,
		1,0,0,0,30,183,1,0,0,0,32,191,1,0,0,0,34,206,1,0,0,0,36,216,1,0,0,0,38,
		219,1,0,0,0,40,232,1,0,0,0,42,255,1,0,0,0,44,270,1,0,0,0,46,272,1,0,0,
		0,48,274,1,0,0,0,50,281,1,0,0,0,52,285,1,0,0,0,54,287,1,0,0,0,56,58,3,
		2,1,0,57,56,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,1,1,0,
		0,0,61,59,1,0,0,0,62,65,3,4,2,0,63,65,3,6,3,0,64,62,1,0,0,0,64,63,1,0,
		0,0,65,3,1,0,0,0,66,72,3,8,4,0,67,72,3,10,5,0,68,72,3,12,6,0,69,72,3,26,
		13,0,70,72,3,36,18,0,71,66,1,0,0,0,71,67,1,0,0,0,71,68,1,0,0,0,71,69,1,
		0,0,0,71,70,1,0,0,0,72,73,1,0,0,0,73,74,5,1,0,0,74,5,1,0,0,0,75,81,3,32,
		16,0,76,81,3,38,19,0,77,81,3,40,20,0,78,81,3,42,21,0,79,81,3,28,14,0,80,
		75,1,0,0,0,80,76,1,0,0,0,80,77,1,0,0,0,80,78,1,0,0,0,80,79,1,0,0,0,81,
		7,1,0,0,0,82,84,5,2,0,0,83,82,1,0,0,0,83,84,1,0,0,0,84,85,1,0,0,0,85,86,
		5,39,0,0,86,87,5,3,0,0,87,88,3,14,7,0,88,9,1,0,0,0,89,90,5,39,0,0,90,91,
		5,4,0,0,91,92,3,14,7,0,92,11,1,0,0,0,93,94,5,39,0,0,94,95,5,5,0,0,95,96,
		3,52,26,0,96,97,5,6,0,0,97,98,5,4,0,0,98,99,3,14,7,0,99,13,1,0,0,0,100,
		102,5,38,0,0,101,100,1,0,0,0,101,102,1,0,0,0,102,103,1,0,0,0,103,110,3,
		16,8,0,104,105,5,24,0,0,105,109,3,16,8,0,106,107,5,25,0,0,107,109,3,16,
		8,0,108,104,1,0,0,0,108,106,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,
		111,1,0,0,0,111,114,1,0,0,0,112,110,1,0,0,0,113,115,3,20,10,0,114,113,
		1,0,0,0,114,115,1,0,0,0,115,15,1,0,0,0,116,127,3,18,9,0,117,118,5,26,0,
		0,118,126,3,18,9,0,119,120,5,27,0,0,120,126,3,18,9,0,121,122,5,28,0,0,
		122,126,3,18,9,0,123,124,5,29,0,0,124,126,3,18,9,0,125,117,1,0,0,0,125,
		119,1,0,0,0,125,121,1,0,0,0,125,123,1,0,0,0,126,129,1,0,0,0,127,125,1,
		0,0,0,127,128,1,0,0,0,128,17,1,0,0,0,129,127,1,0,0,0,130,139,5,39,0,0,
		131,139,3,24,12,0,132,139,3,26,13,0,133,139,3,48,24,0,134,135,5,7,0,0,
		135,136,3,14,7,0,136,137,5,8,0,0,137,139,1,0,0,0,138,130,1,0,0,0,138,131,
		1,0,0,0,138,132,1,0,0,0,138,133,1,0,0,0,138,134,1,0,0,0,139,19,1,0,0,0,
		140,141,3,22,11,0,141,142,3,14,7,0,142,21,1,0,0,0,143,144,7,0,0,0,144,
		23,1,0,0,0,145,152,5,19,0,0,146,152,5,21,0,0,147,152,5,22,0,0,148,152,
		5,23,0,0,149,152,5,20,0,0,150,152,3,54,27,0,151,145,1,0,0,0,151,146,1,
		0,0,0,151,147,1,0,0,0,151,148,1,0,0,0,151,149,1,0,0,0,151,150,1,0,0,0,
		152,25,1,0,0,0,153,154,5,39,0,0,154,163,5,7,0,0,155,160,3,14,7,0,156,157,
		5,9,0,0,157,159,3,14,7,0,158,156,1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,
		0,160,161,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,163,155,1,0,0,0,163,
		164,1,0,0,0,164,165,1,0,0,0,165,166,5,8,0,0,166,27,1,0,0,0,167,168,5,10,
		0,0,168,169,5,39,0,0,169,171,5,7,0,0,170,172,3,30,15,0,171,170,1,0,0,0,
		171,172,1,0,0,0,172,173,1,0,0,0,173,174,5,8,0,0,174,178,5,11,0,0,175,177,
		3,2,1,0,176,175,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,
		0,179,181,1,0,0,0,180,178,1,0,0,0,181,182,5,12,0,0,182,29,1,0,0,0,183,
		188,5,39,0,0,184,185,5,9,0,0,185,187,5,39,0,0,186,184,1,0,0,0,187,190,
		1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,31,1,0,0,0,190,188,1,0,0,0,
		191,192,5,13,0,0,192,193,5,7,0,0,193,194,3,14,7,0,194,195,5,8,0,0,195,
		199,5,11,0,0,196,198,3,2,1,0,197,196,1,0,0,0,198,201,1,0,0,0,199,197,1,
		0,0,0,199,200,1,0,0,0,200,202,1,0,0,0,201,199,1,0,0,0,202,204,5,12,0,0,
		203,205,3,34,17,0,204,203,1,0,0,0,204,205,1,0,0,0,205,33,1,0,0,0,206,207,
		5,14,0,0,207,211,5,11,0,0,208,210,3,2,1,0,209,208,1,0,0,0,210,213,1,0,
		0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,214,1,0,0,0,213,211,1,0,0,0,214,
		215,5,12,0,0,215,35,1,0,0,0,216,217,5,15,0,0,217,218,3,14,7,0,218,37,1,
		0,0,0,219,220,5,16,0,0,220,221,5,7,0,0,221,222,3,14,7,0,222,223,5,8,0,
		0,223,227,5,11,0,0,224,226,3,2,1,0,225,224,1,0,0,0,226,229,1,0,0,0,227,
		225,1,0,0,0,227,228,1,0,0,0,228,230,1,0,0,0,229,227,1,0,0,0,230,231,5,
		12,0,0,231,39,1,0,0,0,232,233,5,17,0,0,233,235,5,7,0,0,234,236,3,8,4,0,
		235,234,1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,237,239,5,9,0,0,238,240,
		3,14,7,0,239,238,1,0,0,0,239,240,1,0,0,0,240,241,1,0,0,0,241,243,5,9,0,
		0,242,244,3,10,5,0,243,242,1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,
		246,5,8,0,0,246,250,5,11,0,0,247,249,3,2,1,0,248,247,1,0,0,0,249,252,1,
		0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,253,1,0,0,0,252,250,1,0,0,0,
		253,254,5,12,0,0,254,41,1,0,0,0,255,256,5,17,0,0,256,257,5,7,0,0,257,258,
		3,44,22,0,258,259,5,18,0,0,259,260,3,46,23,0,260,261,5,8,0,0,261,265,5,
		11,0,0,262,264,3,2,1,0,263,262,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,
		265,266,1,0,0,0,266,268,1,0,0,0,267,265,1,0,0,0,268,269,5,12,0,0,269,43,
		1,0,0,0,270,271,5,39,0,0,271,45,1,0,0,0,272,273,3,14,7,0,273,47,1,0,0,
		0,274,275,3,50,25,0,275,276,5,5,0,0,276,277,3,52,26,0,277,278,5,6,0,0,
		278,49,1,0,0,0,279,282,5,39,0,0,280,282,3,54,27,0,281,279,1,0,0,0,281,
		280,1,0,0,0,282,51,1,0,0,0,283,286,5,39,0,0,284,286,3,14,7,0,285,283,1,
		0,0,0,285,284,1,0,0,0,286,53,1,0,0,0,287,296,5,5,0,0,288,293,3,14,7,0,
		289,290,5,9,0,0,290,292,3,14,7,0,291,289,1,0,0,0,292,295,1,0,0,0,293,291,
		1,0,0,0,293,294,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,296,288,1,0,0,
		0,296,297,1,0,0,0,297,298,1,0,0,0,298,299,5,6,0,0,299,55,1,0,0,0,31,59,
		64,71,80,83,101,108,110,114,125,127,138,151,160,163,171,178,188,199,204,
		211,227,235,239,243,250,265,281,285,293,296
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
