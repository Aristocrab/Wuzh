//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Moist.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MoistParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IMoistListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] MoistParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] MoistParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] MoistParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] MoistParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.semicolonTerminatedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSemicolonTerminatedStatement([NotNull] MoistParser.SemicolonTerminatedStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.semicolonTerminatedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSemicolonTerminatedStatement([NotNull] MoistParser.SemicolonTerminatedStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.braceTerminatedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBraceTerminatedStatement([NotNull] MoistParser.BraceTerminatedStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.braceTerminatedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBraceTerminatedStatement([NotNull] MoistParser.BraceTerminatedStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclaration([NotNull] MoistParser.DeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclaration([NotNull] MoistParser.DeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] MoistParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] MoistParser.AssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.indexAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexAssignment([NotNull] MoistParser.IndexAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.indexAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexAssignment([NotNull] MoistParser.IndexAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] MoistParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] MoistParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.multiplyExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplyExpression([NotNull] MoistParser.MultiplyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.multiplyExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplyExpression([NotNull] MoistParser.MultiplyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValue([NotNull] MoistParser.ValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValue([NotNull] MoistParser.ValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.comparisonRightSide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparisonRightSide([NotNull] MoistParser.ComparisonRightSideContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.comparisonRightSide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparisonRightSide([NotNull] MoistParser.ComparisonRightSideContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.comparisonSign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparisonSign([NotNull] MoistParser.ComparisonSignContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.comparisonSign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparisonSign([NotNull] MoistParser.ComparisonSignContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.basicTypeValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBasicTypeValue([NotNull] MoistParser.BasicTypeValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.basicTypeValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBasicTypeValue([NotNull] MoistParser.BasicTypeValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] MoistParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] MoistParser.FunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclaration([NotNull] MoistParser.FunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclaration([NotNull] MoistParser.FunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.functionParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionParameters([NotNull] MoistParser.FunctionParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.functionParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionParameters([NotNull] MoistParser.FunctionParametersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] MoistParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] MoistParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.elseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseStatement([NotNull] MoistParser.ElseStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.elseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseStatement([NotNull] MoistParser.ElseStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.@return"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturn([NotNull] MoistParser.ReturnContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.@return"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturn([NotNull] MoistParser.ReturnContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] MoistParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] MoistParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] MoistParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] MoistParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.forEachStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForEachStatement([NotNull] MoistParser.ForEachStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.forEachStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForEachStatement([NotNull] MoistParser.ForEachStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.forEachVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForEachVariable([NotNull] MoistParser.ForEachVariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.forEachVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForEachVariable([NotNull] MoistParser.ForEachVariableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.forEachCollection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForEachCollection([NotNull] MoistParser.ForEachCollectionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.forEachCollection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForEachCollection([NotNull] MoistParser.ForEachCollectionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.arrayIndexing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayIndexing([NotNull] MoistParser.ArrayIndexingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.arrayIndexing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayIndexing([NotNull] MoistParser.ArrayIndexingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.arrayOrVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayOrVariable([NotNull] MoistParser.ArrayOrVariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.arrayOrVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayOrVariable([NotNull] MoistParser.ArrayOrVariableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.index"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndex([NotNull] MoistParser.IndexContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.index"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndex([NotNull] MoistParser.IndexContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MoistParser.array"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArray([NotNull] MoistParser.ArrayContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MoistParser.array"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArray([NotNull] MoistParser.ArrayContext context);
}
