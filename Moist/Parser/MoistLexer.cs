//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Moist.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MoistLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, Unit=19, Boolean=20, Integer=21, Double=22, String=23, Plus=24, 
		Minus=25, Multiply=26, Divide=27, FloorDivide=28, Remainder=29, GreaterThan=30, 
		GreaterOrEqual=31, LessThan=32, LessOrEqual=33, Equals=34, NotEquals=35, 
		And=36, Or=37, ExclamationMark=38, Identificator=39, Whitespaces=40, Comments=41;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "Unit", "Boolean", "Integer", "Double", "String", "Plus", "Minus", 
		"Multiply", "Divide", "FloorDivide", "Remainder", "GreaterThan", "GreaterOrEqual", 
		"LessThan", "LessOrEqual", "Equals", "NotEquals", "And", "Or", "ExclamationMark", 
		"Identificator", "Whitespaces", "Comments"
	};


	public MoistLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MoistLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'const'", "':='", "'='", "'['", "']'", "'('", "')'", "','", 
		"'func'", "'{'", "'}'", "'if'", "'else'", "'return'", "'while'", "'for'", 
		"'in'", "'unit'", null, null, null, null, "'+'", "'-'", "'*'", "'/'", 
		"'//'", "'%'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!='", "'&&'", "'||'", 
		"'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "Unit", "Boolean", "Integer", 
		"Double", "String", "Plus", "Minus", "Multiply", "Divide", "FloorDivide", 
		"Remainder", "GreaterThan", "GreaterOrEqual", "LessThan", "LessOrEqual", 
		"Equals", "NotEquals", "And", "Or", "ExclamationMark", "Identificator", 
		"Whitespaces", "Comments"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Moist.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MoistLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,41,251,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,1,0,1,0,1,1,1,1,
		1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
		8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,
		1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
		1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,158,8,19,1,20,1,20,1,
		20,5,20,163,8,20,10,20,12,20,166,9,20,3,20,168,8,20,1,21,4,21,171,8,21,
		11,21,12,21,172,1,21,1,21,4,21,177,8,21,11,21,12,21,178,1,22,1,22,1,22,
		1,22,5,22,185,8,22,10,22,12,22,188,9,22,1,22,1,22,1,23,1,23,1,24,1,24,
		1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,
		1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,
		1,36,1,36,1,36,1,37,1,37,1,38,1,38,5,38,231,8,38,10,38,12,38,234,9,38,
		1,39,4,39,237,8,39,11,39,12,39,238,1,39,1,39,1,40,1,40,5,40,245,8,40,10,
		40,12,40,248,9,40,1,40,1,40,0,0,41,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
		17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
		41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
		65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,1,0,7,1,0,49,57,
		1,0,48,57,4,0,10,10,13,13,34,34,92,92,3,0,64,90,95,95,97,122,4,0,48,57,
		65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,260,0,1,1,0,0,
		0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
		0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
		0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
		0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
		0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
		1,0,0,0,0,81,1,0,0,0,1,83,1,0,0,0,3,85,1,0,0,0,5,91,1,0,0,0,7,94,1,0,0,
		0,9,96,1,0,0,0,11,98,1,0,0,0,13,100,1,0,0,0,15,102,1,0,0,0,17,104,1,0,
		0,0,19,106,1,0,0,0,21,111,1,0,0,0,23,113,1,0,0,0,25,115,1,0,0,0,27,118,
		1,0,0,0,29,123,1,0,0,0,31,130,1,0,0,0,33,136,1,0,0,0,35,140,1,0,0,0,37,
		143,1,0,0,0,39,157,1,0,0,0,41,167,1,0,0,0,43,170,1,0,0,0,45,180,1,0,0,
		0,47,191,1,0,0,0,49,193,1,0,0,0,51,195,1,0,0,0,53,197,1,0,0,0,55,199,1,
		0,0,0,57,202,1,0,0,0,59,204,1,0,0,0,61,206,1,0,0,0,63,209,1,0,0,0,65,211,
		1,0,0,0,67,214,1,0,0,0,69,217,1,0,0,0,71,220,1,0,0,0,73,223,1,0,0,0,75,
		226,1,0,0,0,77,228,1,0,0,0,79,236,1,0,0,0,81,242,1,0,0,0,83,84,5,59,0,
		0,84,2,1,0,0,0,85,86,5,99,0,0,86,87,5,111,0,0,87,88,5,110,0,0,88,89,5,
		115,0,0,89,90,5,116,0,0,90,4,1,0,0,0,91,92,5,58,0,0,92,93,5,61,0,0,93,
		6,1,0,0,0,94,95,5,61,0,0,95,8,1,0,0,0,96,97,5,91,0,0,97,10,1,0,0,0,98,
		99,5,93,0,0,99,12,1,0,0,0,100,101,5,40,0,0,101,14,1,0,0,0,102,103,5,41,
		0,0,103,16,1,0,0,0,104,105,5,44,0,0,105,18,1,0,0,0,106,107,5,102,0,0,107,
		108,5,117,0,0,108,109,5,110,0,0,109,110,5,99,0,0,110,20,1,0,0,0,111,112,
		5,123,0,0,112,22,1,0,0,0,113,114,5,125,0,0,114,24,1,0,0,0,115,116,5,105,
		0,0,116,117,5,102,0,0,117,26,1,0,0,0,118,119,5,101,0,0,119,120,5,108,0,
		0,120,121,5,115,0,0,121,122,5,101,0,0,122,28,1,0,0,0,123,124,5,114,0,0,
		124,125,5,101,0,0,125,126,5,116,0,0,126,127,5,117,0,0,127,128,5,114,0,
		0,128,129,5,110,0,0,129,30,1,0,0,0,130,131,5,119,0,0,131,132,5,104,0,0,
		132,133,5,105,0,0,133,134,5,108,0,0,134,135,5,101,0,0,135,32,1,0,0,0,136,
		137,5,102,0,0,137,138,5,111,0,0,138,139,5,114,0,0,139,34,1,0,0,0,140,141,
		5,105,0,0,141,142,5,110,0,0,142,36,1,0,0,0,143,144,5,117,0,0,144,145,5,
		110,0,0,145,146,5,105,0,0,146,147,5,116,0,0,147,38,1,0,0,0,148,149,5,116,
		0,0,149,150,5,114,0,0,150,151,5,117,0,0,151,158,5,101,0,0,152,153,5,102,
		0,0,153,154,5,97,0,0,154,155,5,108,0,0,155,156,5,115,0,0,156,158,5,101,
		0,0,157,148,1,0,0,0,157,152,1,0,0,0,158,40,1,0,0,0,159,168,5,48,0,0,160,
		164,7,0,0,0,161,163,7,1,0,0,162,161,1,0,0,0,163,166,1,0,0,0,164,162,1,
		0,0,0,164,165,1,0,0,0,165,168,1,0,0,0,166,164,1,0,0,0,167,159,1,0,0,0,
		167,160,1,0,0,0,168,42,1,0,0,0,169,171,7,1,0,0,170,169,1,0,0,0,171,172,
		1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,176,5,46,0,
		0,175,177,7,1,0,0,176,175,1,0,0,0,177,178,1,0,0,0,178,176,1,0,0,0,178,
		179,1,0,0,0,179,44,1,0,0,0,180,186,5,34,0,0,181,185,8,2,0,0,182,183,5,
		92,0,0,183,185,9,0,0,0,184,181,1,0,0,0,184,182,1,0,0,0,185,188,1,0,0,0,
		186,184,1,0,0,0,186,187,1,0,0,0,187,189,1,0,0,0,188,186,1,0,0,0,189,190,
		5,34,0,0,190,46,1,0,0,0,191,192,5,43,0,0,192,48,1,0,0,0,193,194,5,45,0,
		0,194,50,1,0,0,0,195,196,5,42,0,0,196,52,1,0,0,0,197,198,5,47,0,0,198,
		54,1,0,0,0,199,200,5,47,0,0,200,201,5,47,0,0,201,56,1,0,0,0,202,203,5,
		37,0,0,203,58,1,0,0,0,204,205,5,62,0,0,205,60,1,0,0,0,206,207,5,62,0,0,
		207,208,5,61,0,0,208,62,1,0,0,0,209,210,5,60,0,0,210,64,1,0,0,0,211,212,
		5,60,0,0,212,213,5,61,0,0,213,66,1,0,0,0,214,215,5,61,0,0,215,216,5,61,
		0,0,216,68,1,0,0,0,217,218,5,33,0,0,218,219,5,61,0,0,219,70,1,0,0,0,220,
		221,5,38,0,0,221,222,5,38,0,0,222,72,1,0,0,0,223,224,5,124,0,0,224,225,
		5,124,0,0,225,74,1,0,0,0,226,227,5,33,0,0,227,76,1,0,0,0,228,232,7,3,0,
		0,229,231,7,4,0,0,230,229,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,
		233,1,0,0,0,233,78,1,0,0,0,234,232,1,0,0,0,235,237,7,5,0,0,236,235,1,0,
		0,0,237,238,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,240,1,0,0,0,240,
		241,6,39,0,0,241,80,1,0,0,0,242,246,5,35,0,0,243,245,8,6,0,0,244,243,1,
		0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,249,1,0,0,0,
		248,246,1,0,0,0,249,250,6,40,0,0,250,82,1,0,0,0,11,0,157,164,167,172,178,
		184,186,232,238,246,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
